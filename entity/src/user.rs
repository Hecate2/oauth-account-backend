//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.15

use sea_orm;
use sea_orm::entity::prelude::*;

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
    fn schema_name(&self) -> Option<&str> {
        Some("public")
    }
    fn table_name(&self) -> &str {
        "user"
    }
}

#[derive(Clone, Debug, PartialEq, Eq, DeriveModel, DeriveActiveModel)]
// #[sea_orm(table_name = "user")]
pub struct Model {
    // #[sea_orm(primary_key)]
    pub private_key: String,
    // #[sea_orm(unique)]
    pub google_id: String,  // The "sub" value returned by Google
    // #[sea_orm(unique)]
    pub github_id: String,  // https://api.github.com/users/Hecate2 -> id
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    PrivateKey,
    GoogleId,
    GithubId,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    PrivateKey,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = String;
    fn auto_increment() -> bool {
        false
    }
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {}

impl ColumnTrait for Column {
    type EntityName = Entity;

    fn def(&self) -> ColumnDef {
        match self {
            Self::PrivateKey => ColumnType::String(None).def(),
            Self::GoogleId => ColumnType::String(None).def().indexed().unique(),
            Self::GithubId => ColumnType::String(None).def().indexed().unique(),
        }
    }
}

impl ActiveModelBehavior for ActiveModel {}
